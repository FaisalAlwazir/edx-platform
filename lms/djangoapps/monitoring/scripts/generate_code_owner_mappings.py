"""
This script generates code owner mappings for monitoring LMS.

Sample usage::

    python lms/djangoapps/monitoring/scripts/generate_code_owner_mappings.py --repo-csv "Individual Repo Ownership.csv" --app-csv "edx-platform Apps Ownership.csv"

Or for more details::

    python lms/djangoapps/monitoring/scripts/generate_code_owner_mappings.py --help


"""
import csv
import click
import logging
import os
import re

log = logging.getLogger(__name__)

# TODO: Clean this up.
# - Move to spreadsheet or leave in code?
# - If in code, reverse mapping so enterprise will be grouped.
# - Use repo-name vs repo-url to make cleaner.
# See clean_unmapped_view_modules.py for updating
EXTERNAL_APPS = {
    'bulk_grades': 'https://github.com/edx/edx-bulk-grades',
    'coaching': 'https://github.com/edx/platform-plugin-coaching',
    'completion': 'https://github.com/edx/completion',
    'config_models': 'https://github.com/edx/django-config-models',
    'consent': 'https://github.com/edx/edx-enterprise',
    'csrf': 'https://github.com/edx/edx-drf-extensions',
    'django': (  # owner? platform-arch? How to map?
        # django.contrib.admin.options
        # django.contrib.admin.sites
        # django.contrib.auth.admin
        # django.contrib.auth.views
        # django.views.generic.base
        # django.views.i18n           Does this belong with i18n-tools owner?  Not worth breaking out?
        'https://github.com/django/django',
        None,  # TODO
    ),
    'django_object_actions': (  # via edx-enterprise
        'https://github.com/crccheck/django-object-actions',
        'https://github.com/edx/edx-enterprise',
    ),
    'drf_yasg': (  # swagger owner? How to map?
        'https://github.com/axnsan12/drf-yasg',
        None,  # TODO
    ),
    'edx_proctoring': 'https://github.com/edx/edx-proctoring',
    'edxval': 'https://github.com/edx/edx-val',
    'enterprise': 'https://github.com/edx/edx-enterprise',
    'enterprise_learner_portal': 'https://github.com/edx/edx-enterprise',
    'help_tokens': 'https://github.com/edx/help-tokens',
    'integrated_channels': 'https://github.com/edx/edx-enterprise',
    'lx_pathway_plugin': (  # owner? tnl? How to map?
        'https://github.com/open-craft/lx-pathway-plugin',
        None,  # TODO
    ),
    'organizations': 'https://github.com/edx/edx-organizations',
    'search': 'https://github.com/edx/edx-search',
    'simple_history': (  # owner? de? How to map?
        'https://github.com/treyhunner/django-simple-history',
        None,  # TODO
    ),
    'social_django': (  # owner? enterprise? platform-arch? split?
        # google-oauth2
        # facebook
        # tpa-saml
        # azuread-oauth2
        # identityServer3
        'https://github.com/python-social-auth/social-app-django',
        None,  # TODO
    ),
    'wiki': 'https://github.com/edx/django-wiki',
}


@click.command()
@click.option(
    '--repo-csv',
    help="File name of .csv file with repo ownership details.",
    required=True
)
@click.option(
    '--app-csv',
    help="File name of .csv file with edx-platform app ownership details.",
    required=True
)
def main(repo_csv, app_csv):
    """
    Reads CSV of ownership data and outputs config.yml setting to system.out.

    Expected CSV format:

        \b
        Path,owner.squad
        ./lms/templates/oauth2_provider,team-red
        ./openedx/core/djangoapps/user_authn,team-blue
        ...

    Final output only includes paths which might contain views.

    """
    owner_to_paths_map = {}
    _map_external_apps(repo_csv, owner_to_paths_map)
    _map_edx_platform_apps(app_csv, owner_to_paths_map)

    print('# Do not hand edit CODE_OWNER_MAPPINGS. Generated by {}'.format(os.path.basename(__file__)))
    print('CODE_OWNER_MAPPINGS:')
    for owner, path_list in sorted(owner_to_paths_map.items()):
        print("  {}:".format(owner))
        path_list.sort()
        for path in path_list:
            print("  - {}".format(path))


def _map_edx_platform_apps(app_csv, owner_to_paths_map):
    """
    Reads CSV of edx-platform app ownership and updates mappings
    """
    with open(app_csv, 'r') as file:
        csv_data = file.read()
    reader = csv.DictReader(csv_data.splitlines())
    for row in reader:
        path = row.get('Path')
        owner = row.get('owner.squad')

        # add paths that may have views
        may_have_views = re.match(r'.*djangoapps', path) or re.match(r'[./]*openedx\/features', path)
        # remove cms (studio) paths and tests
        may_have_views = may_have_views and not re.match(r'.*(\/tests\b|cms\/).*', path)

        if may_have_views:
            path = path.replace('./', '')  # remove ./ from beginning of path
            path = path.replace('/', '.')  # convert path to dotted module name

            # skip catch-alls to ensure everything is properly mapped
            if path in ('common,djangoapps', 'lms.djangoapps', 'openedx.core.djangoapps', 'openedx.features'):
                continue

            if owner not in owner_to_paths_map:
                owner_to_paths_map[owner] = []
            owner_to_paths_map[owner].append(path)


def _map_external_apps(repo_csv, owner_to_paths_map):
    """
    Reads CSV of repo ownership and combines with EXTERNAL_APPS to updates mappings
    """
    with open(repo_csv, 'r') as file:
        csv_data = file.read()
    reader = csv.DictReader(csv_data.splitlines())
    csv_repo_to_owner_map = {}

    for row in reader:
        csv_repo_to_owner_map[row.get('repo url')] = row.get('owner.squad')
    log.info(csv_repo_to_owner_map)

    for path, repo in EXTERNAL_APPS.items():
        # repo was either a string, or the second repo of a tuple
        repo = repo if isinstance(repo, str) else repo[1]
        owner = csv_repo_to_owner_map.get(repo, None)
        if owner:
            if owner not in owner_to_paths_map:
                owner_to_paths_map[owner] = []
            owner_to_paths_map[owner].append(path)
        else:
            log.warn('WARNING: Repo {} was not found in csv. Needed for path {}.'.format(repo, path))


if __name__ == "__main__":
    main()  # pylint: disable=no-value-for-parameter
